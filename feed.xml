<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://firmansyahyunus.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://firmansyahyunus.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-27T17:18:24+00:00</updated><id>https://firmansyahyunus.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Blazor WebAssembly &amp;amp; Web API on .NET 6</title><link href="https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi.html" rel="alternate" type="text/html" title="Blazor WebAssembly &amp;amp; Web API on .NET 6"/><published>2023-10-20T13:56:00+00:00</published><updated>2023-10-20T13:56:00+00:00</updated><id>https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi</id><content type="html" xml:base="https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi.html"><![CDATA[<p>Membuat aplikasi Shopping Cart dengan Blazor WebAssembly dan Web API di .NET 6 C#</p> <p>Dalam artikel ini, kami akan membuat panduan melalui proses langkah demi langkah dalam membuat shopping cart interaktif menggunakan Web API di .NET 6 untuk mengelola data produk, keranjang belanja, dan transaksi.</p> <ol> <li> <p>Buat Project, Pilih Blazor WebAssembly App <img src="/_posts/27.10.2023_22.28.56_REC.png" alt="27.10.2023_22.28.56_REC.png"/></p> </li> <li> <p>Berikan nama project ShopCart.Web <img src="/_posts/27.10.2023_22.39.59_REC.png" alt="27.10.2023_22.39.59_REC.png"/></p> </li> <li> <p>Pilih Framework .NET 6 <img src="/_posts/27.10.2023_22.41.07_REC.png" alt="27.10.2023_22.41.07_REC.png"/></p> </li> <li> <p>Add New Project pada Solution, klik kanan ke Solution -&gt; Add -&gt; New Project <img src="/_posts/Screenshot 2023-10-27 225341.png" alt="Screenshot 2023-10-27 225341.png"/></p> </li> <li> <p>Pilih Project ASP.NET Core Web API <img src="/_posts/27.10.2023_22.55.36_REC.png" alt="27.10.2023_22.55.36_REC.png"/></p> </li> <li> <p>Buat nama project ShopCart.Api</p> </li> <li> <p>Pilih Framework .Net 6, Authentication Type None <img src="/_posts/27.10.2023_23.05.20_REC.png" alt="27.10.2023_23.05.20_REC.png"/></p> </li> <li> <p>Buat File berikut pada Shop.Api Project, Folder Entities</p> </li> </ol> <p><code class="language-plaintext highlighter-rouge">Cart.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">CartItem.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CartItem</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CartId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Product.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ImageURL</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CategoryId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">ProductCategory.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
     <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductCategory</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">User.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <ol> <li> <p>Entity Relationship Diagram <img src="/_posts/27.10.2023_23.26.48_REC.png" alt="ERD"/></p> </li> <li> <p>Tambah dependency library melalui Nuget Package pada project ShoptCart.Api, install versi 6 <code class="language-plaintext highlighter-rouge">Microsoft.EntityFrameworkCore.SqlServer</code> <code class="language-plaintext highlighter-rouge">Microsoft.EntityFrameworkCore.Tools</code></p> </li> <li> <p>Tambahkan ConnectionString untuk koneksi ke Database SQL pada file appsettings.json <code class="language-plaintext highlighter-rouge">appsettings.json</code></p> </li> </ol> <p>{ “ConnectionStrings”: { “ShopCartConnection”: “Server=MYLOCAL;Database=ShopCart;Trusted_Connection=True” }, “Logging”: { “LogLevel”: { “Default”: “Information”, “Microsoft.AspNetCore”: “Warning” } }, “AllowedHosts”: “*” }</p> <ol> <li>Buat file datacontext pada project Api dan folder Data <code class="language-plaintext highlighter-rouge">ShopCartDbContext.cs</code> ```c# using Microsoft.EntityFrameworkCore; using ShopCart.Api.Entities;</li> </ol> <p>namespace ShopCart.Api.Data { public class ShopCartDbContext : DbContext { public ShopCartDbContext(DbContextOptions<ShopCartDbContext> options) : base(options) {</ShopCartDbContext></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        //Products
        //Beauty Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 1,
            Name = "Glossier - Beauty Kit",
            Description = "A kit provided by Glossier, containing skin care, hair care and makeup products",
            ImageURL = "/Images/Beauty/Beauty1.png",
            Price = 100,
            Qty = 100,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 2,
            Name = "Curology - Skin Care Kit",
            Description = "A kit provided by Curology, containing skin care products",
            ImageURL = "/Images/Beauty/Beauty2.png",
            Price = 50,
            Qty = 45,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 3,
            Name = "Cocooil - Organic Coconut Oil",
            Description = "A kit provided by Curology, containing skin care products",
            ImageURL = "/Images/Beauty/Beauty3.png",
            Price = 20,
            Qty = 30,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 4,
            Name = "Schwarzkopf - Hair Care and Skin Care Kit",
            Description = "A kit provided by Schwarzkopf, containing skin care and hair care products",
            ImageURL = "/Images/Beauty/Beauty4.png",
            Price = 50,
            Qty = 60,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 5,
            Name = "Skin Care Kit",
            Description = "Skin Care Kit, containing skin care and hair care products",
            ImageURL = "/Images/Beauty/Beauty5.png",
            Price = 30,
            Qty = 85,
            CategoryId = 1

        });
        //Electronics Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 6,
            Name = "Air Pods",
            Description = "Air Pods - in-ear wireless headphones",
            ImageURL = "/Images/Electronic/Electronics1.png",
            Price = 100,
            Qty = 120,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 7,
            Name = "On-ear Golden Headphones",
            Description = "On-ear Golden Headphones - these headphones are not wireless",
            ImageURL = "/Images/Electronic/Electronics2.png",
            Price = 40,
            Qty = 200,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 8,
            Name = "On-ear Black Headphones",
            Description = "On-ear Black Headphones - these headphones are not wireless",
            ImageURL = "/Images/Electronic/Electronics3.png",
            Price = 40,
            Qty = 300,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 9,
            Name = "Sennheiser Digital Camera with Tripod",
            Description = "Sennheiser Digital Camera - High quality digital camera provided by Sennheiser - includes tripod",
            ImageURL = "/Images/Electronic/Electronic4.png",
            Price = 600,
            Qty = 20,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 10,
            Name = "Canon Digital Camera",
            Description = "Canon Digital Camera - High quality digital camera provided by Canon",
            ImageURL = "/Images/Electronic/Electronic5.png",
            Price = 500,
            Qty = 15,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 11,
            Name = "Nintendo Gameboy",
            Description = "Gameboy - Provided by Nintendo",
            ImageURL = "/Images/Electronic/technology6.png",
            Price = 100,
            Qty = 60,
            CategoryId = 3
        });
        //Furniture Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 12,
            Name = "Black Leather Office Chair",
            Description = "Very comfortable black leather office chair",
            ImageURL = "/Images/Furniture/Furniture1.png",
            Price = 50,
            Qty = 212,
            CategoryId = 2
        });

        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 13,
            Name = "Pink Leather Office Chair",
            Description = "Very comfortable pink leather office chair",
            ImageURL = "/Images/Furniture/Furniture2.png",
            Price = 50,
            Qty = 112,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 14,
            Name = "Lounge Chair",
            Description = "Very comfortable lounge chair",
            ImageURL = "/Images/Furniture/Furniture3.png",
            Price = 70,
            Qty = 90,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 15,
            Name = "Silver Lounge Chair",
            Description = "Very comfortable Silver lounge chair",
            ImageURL = "/Images/Furniture/Furniture4.png",
            Price = 120,
            Qty = 95,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 16,
            Name = "Porcelain Table Lamp",
            Description = "White and blue Porcelain Table Lamp",
            ImageURL = "/Images/Furniture/Furniture6.png",
            Price = 15,
            Qty = 100,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 17,
            Name = "Office Table Lamp",
            Description = "Office Table Lamp",
            ImageURL = "/Images/Furniture/Furniture7.png",
            Price = 20,
            Qty = 73,
            CategoryId = 2
        });
        //Shoes Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 18,
            Name = "Puma Sneakers",
            Description = "Comfortable Puma Sneakers in most sizes",
            ImageURL = "/Images/Shoes/Shoes1.png",
            Price = 100,
            Qty = 50,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 19,
            Name = "Colorful Trainers",
            Description = "Colorful trainsers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes2.png",
            Price = 150,
            Qty = 60,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 20,
            Name = "Blue Nike Trainers",
            Description = "Blue Nike Trainers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes3.png",
            Price = 200,
            Qty = 70,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 21,
            Name = "Colorful Hummel Trainers",
            Description = "Colorful Hummel Trainers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes4.png",
            Price = 120,
            Qty = 120,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 22,
            Name = "Red Nike Trainers",
            Description = "Red Nike Trainers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes5.png",
            Price = 200,
            Qty = 100,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 23,
            Name = "Birkenstock Sandles",
            Description = "Birkenstock Sandles - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes6.png",
            Price = 50,
            Qty = 150,
            CategoryId = 4
        });

        //Add users
        modelBuilder.Entity&lt;User&gt;().HasData(new User
        {
            Id = 1,
            UserName = "Bob"

        });
        modelBuilder.Entity&lt;User&gt;().HasData(new User
        {
            Id = 2,
            UserName = "Sarah"

        });

        //Create Shopping Cart for Users
        modelBuilder.Entity&lt;Cart&gt;().HasData(new Cart
        {
            Id = 1,
            UserId = 1

        });
        modelBuilder.Entity&lt;Cart&gt;().HasData(new Cart
        {
            Id = 2,
            UserId = 2

        });
        //Add Product Categories
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 1,
            Name = "Beauty"
        });
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 2,
            Name = "Furniture"
        });
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 3,
            Name = "Electronics"
        });
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 4,
            Name = "Shoes"
        });
    }

    public DbSet&lt;Cart&gt; Carts { get; set; }
    public DbSet&lt;CartItem&gt; CartItems { get; set; }
    public DbSet&lt;Product&gt; Products { get; set; }
    public DbSet&lt;ProductCategory&gt; ProductCategories { get; set; }
    public DbSet&lt;User&gt; Users { get; set; }
} }
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
13. Tambahan pada Program.cs service koneksi ke SQLServer
`Program.cs`
```c#
using Microsoft.EntityFrameworkCore;
using ShopCart.Api.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddDbContext&lt;ShopCartDbContext&gt;(options =&gt;
    options.UseSqlServer(builder.Configuration.GetConnectionString("ShopCartConnection"))
    );

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();

</code></pre></div></div> <ol> <li>Generate Migration EF Core, menggunakan Package Manager Console, di Menu Tools - Nuget Package Manager</li> <li>Ketik code berikut untuk menjalankan migrasi EF Core ke database dan pilihdefault Project ke ShopCart.Api <code class="language-plaintext highlighter-rouge">Add-Migration InitialCreate</code> `Update-Database’</li> </ol> <p><img src="/_posts/28.10.2023_00.12.15_REC.png" alt="Package Manager Console"/></p> <p>16.</p>]]></content><author><name></name></author><category term="sample-posts"/><summary type="html"><![CDATA[Learn Blazor WebAssembly and Web API on .NET 6 by building a shopping cart application using C#]]></summary></entry></feed>