<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://firmansyahyunus.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://firmansyahyunus.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-28T18:35:15+00:00</updated><id>https://firmansyahyunus.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Blazor WebAssembly &amp;amp; Web API on .NET 6 C# (Part 1)</title><link href="https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi.html" rel="alternate" type="text/html" title="Blazor WebAssembly &amp;amp; Web API on .NET 6 C# (Part 1)"/><published>2023-10-20T13:56:00+00:00</published><updated>2023-10-20T13:56:00+00:00</updated><id>https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi</id><content type="html" xml:base="https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi.html"><![CDATA[<p>Membuat aplikasi Shopping Cart dengan Blazor WebAssembly dan Web API di .NET 6 C#</p> <p>Dalam artikel ini, kami akan membuat panduan melalui proses langkah demi langkah dalam membuat shopping cart interaktif menggunakan Web API di .NET 6 untuk mengelola data produk, keranjang belanja, dan transaksi.</p> <ol> <li> <p>Buat Project, Pilih Blazor WebAssembly App <img src="../assets/img/Blazor Web Api/27.10.2023_22.28.56_REC.png" alt="Blazor WebAssembly"/></p> </li> <li> <p>Ketik nama project ShopCart.Web <img src="../assets/img/Blazor Web Api/27.10.2023_22.39.59_REC.png" alt="ShopCart.Web"/></p> </li> <li> <p>Pilih Framework .NET 6 <img src="../assets/img/Blazor Web Api/27.10.2023_22.41.07_REC.png" alt=".NET 6"/></p> </li> <li> <p>Add New Project pada Solution, klik kanan ke Solution -&gt; Add -&gt; New Project <img src="../assets/img/Blazor Web Api/Screenshot 2023-10-27 225341.png" alt="Add New Project"/></p> </li> <li> <p>Pilih Project ASP.NET Core Web API <img src="../assets/img/Blazor Web Api/27.10.2023_22.55.36_REC.png" alt="Web API Project"/></p> </li> <li> <p>Buat nama project ShopCart.Api</p> </li> <li> <p>Pilih Framework .Net 6, Authentication Type None <img src="../assets/img/Blazor Web Api/27.10.2023_23.05.20_REC.png" alt="NET 6"/></p> </li> <li> <p>Buat File berikut pada Shop.Api Project, Folder Entities</p> </li> </ol> <p><code class="language-plaintext highlighter-rouge">Cart.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">CartItem.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CartItem</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CartId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">Product.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ImageURL</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CategoryId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">ProductCategory.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
     <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductCategory</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">User.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Api.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">User</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <ol> <li> <p>Entity Relationship Diagram <img src="../assets/img/Blazor Web Api/27.10.2023_23.26.48_REC.png" alt="ERD"/></p> </li> <li> <p>Tambah dependency library melalui Nuget Package pada project ShoptCart.Api, install versi 6 <code class="language-plaintext highlighter-rouge">Microsoft.EntityFrameworkCore.SqlServer</code> <code class="language-plaintext highlighter-rouge">Microsoft.EntityFrameworkCore.Tools</code></p> </li> <li> <p>Tambahkan ConnectionString untuk koneksi ke Database SQL pada file appsettings.json <code class="language-plaintext highlighter-rouge">appsettings.json</code></p> </li> </ol> <p>{ “ConnectionStrings”: { “ShopCartConnection”: “Server=MYLOCAL;Database=ShopCart;Trusted_Connection=True” }, “Logging”: { “LogLevel”: { “Default”: “Information”, “Microsoft.AspNetCore”: “Warning” } }, “AllowedHosts”: “*” }</p> <ol> <li>Buat file datacontext pada project Api dan folder Data <code class="language-plaintext highlighter-rouge">ShopCartDbContext.cs</code> ```c# using Microsoft.EntityFrameworkCore; using ShopCart.Api.Entities;</li> </ol> <p>namespace ShopCart.Api.Data { public class ShopCartDbContext : DbContext { public ShopCartDbContext(DbContextOptions<ShopCartDbContext> options) : base(options) {</ShopCartDbContext></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        //Products
        //Beauty Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 1,
            Name = "Glossier - Beauty Kit",
            Description = "A kit provided by Glossier, containing skin care, hair care and makeup products",
            ImageURL = "/Images/Beauty/Beauty1.png",
            Price = 100,
            Qty = 100,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 2,
            Name = "Curology - Skin Care Kit",
            Description = "A kit provided by Curology, containing skin care products",
            ImageURL = "/Images/Beauty/Beauty2.png",
            Price = 50,
            Qty = 45,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 3,
            Name = "Cocooil - Organic Coconut Oil",
            Description = "A kit provided by Curology, containing skin care products",
            ImageURL = "/Images/Beauty/Beauty3.png",
            Price = 20,
            Qty = 30,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 4,
            Name = "Schwarzkopf - Hair Care and Skin Care Kit",
            Description = "A kit provided by Schwarzkopf, containing skin care and hair care products",
            ImageURL = "/Images/Beauty/Beauty4.png",
            Price = 50,
            Qty = 60,
            CategoryId = 1

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 5,
            Name = "Skin Care Kit",
            Description = "Skin Care Kit, containing skin care and hair care products",
            ImageURL = "/Images/Beauty/Beauty5.png",
            Price = 30,
            Qty = 85,
            CategoryId = 1

        });
        //Electronics Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 6,
            Name = "Air Pods",
            Description = "Air Pods - in-ear wireless headphones",
            ImageURL = "/Images/Electronic/Electronics1.png",
            Price = 100,
            Qty = 120,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 7,
            Name = "On-ear Golden Headphones",
            Description = "On-ear Golden Headphones - these headphones are not wireless",
            ImageURL = "/Images/Electronic/Electronics2.png",
            Price = 40,
            Qty = 200,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 8,
            Name = "On-ear Black Headphones",
            Description = "On-ear Black Headphones - these headphones are not wireless",
            ImageURL = "/Images/Electronic/Electronics3.png",
            Price = 40,
            Qty = 300,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 9,
            Name = "Sennheiser Digital Camera with Tripod",
            Description = "Sennheiser Digital Camera - High quality digital camera provided by Sennheiser - includes tripod",
            ImageURL = "/Images/Electronic/Electronic4.png",
            Price = 600,
            Qty = 20,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 10,
            Name = "Canon Digital Camera",
            Description = "Canon Digital Camera - High quality digital camera provided by Canon",
            ImageURL = "/Images/Electronic/Electronic5.png",
            Price = 500,
            Qty = 15,
            CategoryId = 3

        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 11,
            Name = "Nintendo Gameboy",
            Description = "Gameboy - Provided by Nintendo",
            ImageURL = "/Images/Electronic/technology6.png",
            Price = 100,
            Qty = 60,
            CategoryId = 3
        });
        //Furniture Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 12,
            Name = "Black Leather Office Chair",
            Description = "Very comfortable black leather office chair",
            ImageURL = "/Images/Furniture/Furniture1.png",
            Price = 50,
            Qty = 212,
            CategoryId = 2
        });

        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 13,
            Name = "Pink Leather Office Chair",
            Description = "Very comfortable pink leather office chair",
            ImageURL = "/Images/Furniture/Furniture2.png",
            Price = 50,
            Qty = 112,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 14,
            Name = "Lounge Chair",
            Description = "Very comfortable lounge chair",
            ImageURL = "/Images/Furniture/Furniture3.png",
            Price = 70,
            Qty = 90,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 15,
            Name = "Silver Lounge Chair",
            Description = "Very comfortable Silver lounge chair",
            ImageURL = "/Images/Furniture/Furniture4.png",
            Price = 120,
            Qty = 95,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 16,
            Name = "Porcelain Table Lamp",
            Description = "White and blue Porcelain Table Lamp",
            ImageURL = "/Images/Furniture/Furniture6.png",
            Price = 15,
            Qty = 100,
            CategoryId = 2
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 17,
            Name = "Office Table Lamp",
            Description = "Office Table Lamp",
            ImageURL = "/Images/Furniture/Furniture7.png",
            Price = 20,
            Qty = 73,
            CategoryId = 2
        });
        //Shoes Category
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 18,
            Name = "Puma Sneakers",
            Description = "Comfortable Puma Sneakers in most sizes",
            ImageURL = "/Images/Shoes/Shoes1.png",
            Price = 100,
            Qty = 50,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 19,
            Name = "Colorful Trainers",
            Description = "Colorful trainsers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes2.png",
            Price = 150,
            Qty = 60,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 20,
            Name = "Blue Nike Trainers",
            Description = "Blue Nike Trainers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes3.png",
            Price = 200,
            Qty = 70,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 21,
            Name = "Colorful Hummel Trainers",
            Description = "Colorful Hummel Trainers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes4.png",
            Price = 120,
            Qty = 120,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 22,
            Name = "Red Nike Trainers",
            Description = "Red Nike Trainers - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes5.png",
            Price = 200,
            Qty = 100,
            CategoryId = 4
        });
        modelBuilder.Entity&lt;Product&gt;().HasData(new Product
        {
            Id = 23,
            Name = "Birkenstock Sandles",
            Description = "Birkenstock Sandles - available in most sizes",
            ImageURL = "/Images/Shoes/Shoes6.png",
            Price = 50,
            Qty = 150,
            CategoryId = 4
        });

        //Add users
        modelBuilder.Entity&lt;User&gt;().HasData(new User
        {
            Id = 1,
            UserName = "Bob"

        });
        modelBuilder.Entity&lt;User&gt;().HasData(new User
        {
            Id = 2,
            UserName = "Sarah"

        });

        //Create Shopping Cart for Users
        modelBuilder.Entity&lt;Cart&gt;().HasData(new Cart
        {
            Id = 1,
            UserId = 1

        });
        modelBuilder.Entity&lt;Cart&gt;().HasData(new Cart
        {
            Id = 2,
            UserId = 2

        });
        //Add Product Categories
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 1,
            Name = "Beauty"
        });
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 2,
            Name = "Furniture"
        });
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 3,
            Name = "Electronics"
        });
        modelBuilder.Entity&lt;ProductCategory&gt;().HasData(new ProductCategory
        {
            Id = 4,
            Name = "Shoes"
        });
    }

    public DbSet&lt;Cart&gt; Carts { get; set; }
    public DbSet&lt;CartItem&gt; CartItems { get; set; }
    public DbSet&lt;Product&gt; Products { get; set; }
    public DbSet&lt;ProductCategory&gt; ProductCategories { get; set; }
    public DbSet&lt;User&gt; Users { get; set; }
} }
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
13. Tambahan pada Program.cs service koneksi ke SQLServer
`Program.cs`
```c#
using Microsoft.EntityFrameworkCore;
using ShopCart.Api.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddDbContext&lt;ShopCartDbContext&gt;(options =&gt;
    options.UseSqlServer(builder.Configuration.GetConnectionString("ShopCartConnection"))
    );

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();

</code></pre></div></div> <ol> <li>Generate Migration EF Core, menggunakan Package Manager Console, di Menu Tools - Nuget Package Manager</li> <li> <p>Ketik code berikut untuk menjalankan migrasi EF Core ke database dan pilihdefault Project ke ShopCart.Api <code class="language-plaintext highlighter-rouge">Add-Migration InitialCreate</code> `Update-Database’ <img src="../assets/img/Blazor Web Api/28.10.2023_00.12.15_REC.png" alt="Package Manager Console"/></p> </li> <li>Hasil migrasi pada database SQL ShopCart</li> </ol> <p><img src="../assets/img/Blazor Web Api/28.10.2023_11.39.51_REC.png" alt="Database"/></p> <p>Progres sampai saat ini <br/> Table Users <img src="../assets/img/Blazor Web Api/28.10.2023_23.51.31_REC.png" alt="Alt text"/></p> <p>Table Products <img src="../assets/img/Blazor Web Api/28.10.2023_23.55.49_REC.png" alt="Alt text"/></p> <p>Table ProductCategories <img src="../assets/img/Blazor Web Api/28.10.2023_23.52.25_REC.png" alt="Alt text"/></p> <p>Table Cart <img src="../assets/img/Blazor Web Api/28.10.2023_23.52.58_REC.png" alt="Alt text"/></p> <p>Struktur Project Solution <br/> <img src="../assets/img/Blazor Web Api/29.10.2023_00.01.00_REC.png" alt="Alt text"/></p>]]></content><author><name></name></author><category term="sample-posts"/><summary type="html"><![CDATA[Learn Blazor WebAssembly and Web API on .NET 6 by building a shopping cart application using C#]]></summary></entry><entry><title type="html">Blazor WebAssembly &amp;amp; Web API on .NET 6 C# (Part 2)</title><link href="https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi-2.html" rel="alternate" type="text/html" title="Blazor WebAssembly &amp;amp; Web API on .NET 6 C# (Part 2)"/><published>2023-10-20T13:56:00+00:00</published><updated>2023-10-20T13:56:00+00:00</updated><id>https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi-2</id><content type="html" xml:base="https://firmansyahyunus.github.io/sample-posts/2023/10/20/post-blazor-webapi-2.html"><![CDATA[<p>Membuat aplikasi Shopping Cart dengan Blazor WebAssembly dan Web API di .NET 6 C#</p> <p>Dalam artikel ini, kami akan membuat panduan melalui proses langkah demi langkah dalam membuat shopping cart interaktif menggunakan Web API di .NET 6 untuk mengelola data produk, keranjang belanja, dan transaksi.</p> <ol> <li> <p>Buat Project baru untuk Model Class Library Pilih ClassLibrary beri nama project ShopCart.Models pilih Framework .NET 6 <img src="../assets/img/Blazor Web Api/28.10.2023_11.51.07_REC.png" alt="ShopCart.Models"/></p> </li> <li> <p>Buat file berikut pada Shop.Models project, folder Dtos <img src="../assets/img/Blazor Web Api/28.10.2023_12.04.03_REC.png" alt="Alt text"/></p> </li> </ol> <p><code class="language-plaintext highlighter-rouge">CartItemDto.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Models.Dtos</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CartItemDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CartId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductDescription</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductImageURL</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">TotalPrice</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">CartItemQtyUpdateDto.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Models.Dtos</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CartItemQtyUpdateDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CartItemId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">CartItemToAddDto.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Models.Dtos</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CartItemToAddDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CartId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">ProductDto.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ShopCart.Models.Dtos</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductDto</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ImageURL</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Qty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CategoryId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">CategoryName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ol> <li>Membuat folder Repository untuk menggunakan repository pattern, buat file di dalam folder tersebut, file interface IProductRepository dan file ProductRepository untuk meng-implementasikan interface .</li> </ol> <p><code class="language-plaintext highlighter-rouge">IProductRepository.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ShopCart.Api.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ShopCart.Api.Repositories.Contracts</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetItems</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ProductCategory</span><span class="p">&gt;&gt;</span> <span class="nf">GetCategories</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">ProductCategory</span><span class="p">&gt;</span> <span class="nf">GetCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>    
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">ProductRepository.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ShopCart.Api.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ShopCart.Api.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ShopCart.Api.Repositories.Contracts</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ShopCart.Api.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductRepository</span> <span class="p">:</span> <span class="n">IProductRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ShopCartDbContext</span> <span class="n">context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductRepository</span><span class="p">(</span><span class="n">ShopCartDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ProductCategory</span><span class="p">&gt;&gt;</span> <span class="nf">GetCategories</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">categories</span> <span class="p">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">ProductCategories</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">categories</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ProductCategory</span><span class="p">&gt;</span> <span class="nf">GetCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetItems</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">products</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ol> <li> <p>Tambahkan kode independency injection berikut pada file Program.cs agar repository bisa digunakan. <code class="language-plaintext highlighter-rouge">builder.Services.AddScoped&lt;IProductRepository, ProductRepository&gt;();</code> <img src="../assets/img/Blazor Web Api/29.10.2023_00.41.17_REC.png" alt="Alt text"/></p> </li> <li> <p>Buat Folder Extensions, dan didalamnya buat file DtoConversions.cs, file ini digunakan untuk konversi hasil data dari database ke Swagger UI.</p> </li> </ol> <p><code class="language-plaintext highlighter-rouge">DtoConversions.cs</code></p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ShopCart.Api.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ShopCart.Models.Dtos</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ShopCart.Api.Extensions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DtoConversions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ProductDto</span><span class="p">&gt;</span> <span class="nf">ConvertToDto</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">products</span><span class="p">,</span>
                                                                <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ProductCategory</span><span class="p">&gt;</span> <span class="n">productCategories</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="k">from</span> <span class="n">product</span> <span class="k">in</span> <span class="n">products</span>
                    <span class="k">join</span> <span class="n">productCategory</span> <span class="k">in</span> <span class="n">productCategories</span>
                    <span class="k">on</span> <span class="n">product</span><span class="p">.</span><span class="n">CategoryId</span> <span class="k">equals</span> <span class="n">productCategory</span><span class="p">.</span><span class="n">Id</span>
                    <span class="k">select</span> <span class="k">new</span> <span class="n">ProductDto</span>
                    <span class="p">{</span>
                        <span class="n">Id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span>
                        <span class="n">ImageURL</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">ImageURL</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span>
                        <span class="n">Qty</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Qty</span><span class="p">,</span>
                        <span class="n">CategoryId</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">CategoryId</span><span class="p">,</span>
                        <span class="n">CategoryName</span> <span class="p">=</span> <span class="n">productCategory</span><span class="p">.</span><span class="n">Name</span>

                    <span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ol> <li>Buat file ProductController untuk memanggil repository yang sudah dibuat. <code class="language-plaintext highlighter-rouge">ProductController.cs</code> ```c# using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using ShopCart.Api.Extensions; using ShopCart.Api.Repositories.Contracts; using ShopCart.Models.Dtos;</li> </ol> <p>namespace ShopCart.Api.Controllers { [Route(“api/[controller]”)] [ApiController] public class ProductController : ControllerBase { private readonly IProductRepository productRepository;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    public ProductController(IProductRepository productRepository)
    {
        this.productRepository = productRepository;
    }

    [HttpGet]
    public async Task&lt;ActionResult&lt;IEnumerable&lt;ProductDto&gt;&gt;&gt; GetItems()
    {
        try
        {
            var products = await this.productRepository.GetItems();
            var productcategories = await this.productRepository.GetCategories();

            if (products == null || productcategories == null)
            {
                return NotFound();
            }
            else
            {
                var productDtos = products.ConvertToDto(productcategories);

                return Ok(productDtos);
            }
        }
        catch (Exception ex)
        {
            return StatusCode(StatusCodes.Status500InternalServerError,
                            "Error retrieving data from database");
        }
    }
} }
</code></pre></div></div> <p>```</p> <ol> <li>Jalankan Project Solution pilih Menu Debug -&gt; Start Debugging atau dengan shortcut F5 pada keyboard, maka akan tampil halaman Swagger, Product dan Method Get /api/Product, karena sebelumnya sudah dibuat pada Step 6, file ProductController.cs <img src="../assets/img/Blazor Web Api/29.10.2023_01.14.51_REC.png" alt="Alt text"/></li> </ol> <p>Coba jalankan method Get /api/Product dengan cara, Pilih Try it out -&gt; Pilih Execute, maka data product akan tampil <br/></p> <p><img src="../assets/img/Blazor Web Api/29.10.2023_01.24.41_REC.png" alt="Alt text"/></p> <p>Struktur Project Solution <br/> <img src="../assets/img/Blazor Web Api/29.10.2023_01.30.56_REC.png" alt="Alt text"/></p>]]></content><author><name></name></author><category term="sample-posts"/><summary type="html"><![CDATA[Learn Blazor WebAssembly and Web API on .NET 6 by building a shopping cart application using C#]]></summary></entry></feed>